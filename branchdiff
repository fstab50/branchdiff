#!/usr/bin/env bash

#
#   Branch Differences Display
#
#      - commit diff between master & develop branches
#

pkg=$(basename $0)                                  # pkg (script) full name
pkg_root=$(echo $pkg | awk -F '.' '{print $1}')     # pkg without file extention
pkg_path=$(cd $(dirname $0); pwd -P)                # location of pkg
pkg_lib="$pkg_path/core"
tmp_file="/tmp/gitdiff.txt"
header_file="/tmp/header.txt"
twidth=$(( $(tput cols) - 10 ))

# source colors, exitcodes, version file, and  std_function defs | NOTE: source order dependent
source $pkg_lib/colors.sh
source $pkg_lib/exitcodes.sh
source $pkg_lib/version.py
source $pkg_lib/std_functions.sh

frame=$(echo -e ${bodytext})
E_ERROR="1"

# formatting
bbc=$(echo -e ${bold}${brightcyan})
title=$(echo -e ${bold}${brightwhite})              # title color, white + bold
hic=$(echo -e ${bold}${brightyellowgreen})          # help menu accent 1
bin=$(echo -e ${bold}${orange})                     # help menu binary accent
ul=$(echo -e ${underline})                          # std underline
bd=$(echo -e ${bold})                               # std bold
wt=$(echo -e ${brightwhite})                        # help menu accent 2
fs=$(echo -e ${yellow})                             # file path color
btext=${reset}                                      # clear accents; rtn to native term colors


# --- declarations ---------------------------------------------------------------------------------


function help_menu(){
    cat <<EOM

                        ${title}branchdiff${btext} help

  ${title}DESCRIPTION${btext}

        Working branch status combined with detailed commit timeline

  ${title}SYNOPSIS${btext}

           $  ${bin}$pkg${reset}   ${bbc}[${btext} --branch <value> ${bbc}]${btext} ${bbc}[${btext} --code ${bbc}]${btext}

                         [-b | --branch <value> ]
                         [-c | --code    ]
                         [-h | --help    ]
                         [-V | --version ]

  ${title}OPTIONS${btext}

        ${title}-b${btext}, ${title}--branch${btext}  <value> :  When provided, parameter uses branch
            name provided for  <value> as the baseline code reference
            instead of the master branch  (default branch reference).

        ${title}-c${btext}, ${title}--code${btext}: If provided, $pkg displays the line-by-line
            differences between master branch and the current working
            branch. If --branch option provided, the code option uses
            the branchname given as the parameter for --branch as the
            reference instead of master branch.

        ${title}-h${btext}, ${title}--help${btext}:  Display this help menu

        ${title}-V${btext}, ${title}--version${btext}:  Show $pkg version & license information

  ${title}EXAMPLES${btext}

            ${title}Status of working branch vs. master${btext}
                    $  $pkg

            ${title}Status of working branch vs. another named branch${btext}
                    $  $pkg  --branch  <branchname>

            ${title}Code updates vs. master${btext}
                    $  $pkg  code
  _________________________________________________________________________

            ${btext}README:  ${url}https://github.com/fstab50/branchdiff${btext}
  _________________________________________________________________________
${reset}
EOM
    #
    # <-- end function put_rule_help -->
}


function parse_parameters(){
    ##
    ##  Parse all command-line parameters
    ##

    local var parameter major

    if [[ ! "$@" ]]; then
        branchdiff
        exit 0
    else
        while [ $# -gt 0 ]; do
            case $1 in
                '-h' | '--help')
                    OPERATION="help"
                    shift 1
                    ;;

                '-b' | '--branch')

                    OPERATION="alt_branch_compare"

                    if [ "$2" ]; then

                        if valid_branch "$2"; then
                            ALT_BRANCH="$2"
                            shift 2
                        else
                            std_warn "You must provide a valid branch name as a parameter"
                            exit $E_MISC
                        fi

                    else
                        std_warn "You must provide a valid branch name as a parameter"
                        shift 1
                    fi
                    ;;

                '-c' | '--code')
                    OPERATION="code"
                    shift 1
                    ;;

                '-V' | '--version')
                    OPERATION="display_version"
                    shift 1
                    ;;

                *)
                    std_warn "You must provide a valid parameter or None"
                    exit 1
                    ;;
            esac
        done
    fi
    #
    # <-- end function parse_parameters -->
}


function display_program_version(){
    ##
    ## output script version info, license
    ##
    local _version=$__version__
    local _hic=$(echo -e ${brightblue})
    local _year=$(date +%G)
    local _bashver="$(
                bash --version | head -n1 | awk -F 'version' '{print $2}' \
                    | awk '{print $1}' | awk -F '(' '{print $1}'
            )"
    #
    cat <<EOM
    ______________________________________________________________________





              ${_hic}$pkg${reset} version: ${title}$_version${reset}   |   GNU Bash $_bashver




    ______________________________________________________________________

       Copyright 2017-$_year, Blake Huber.  This program distributed under
       MIT License.  Copyright notice must remain with derivative works.
    ______________________________________________________________________

EOM
}


function current_branch(){
    echo "$(git branch | grep '\*' | awk '{print $2}')"
}


function float2int() {
  awk 'BEGIN{for (i=1; i<ARGC;i++) printf "%.0f\n", ARGV[i]}' "$@"
}


function title_header(){
    local branch1="$1"
    local branch2="$2"
    local header="$3"
    local sum
    local pct
    local vw
    printf -- "\n${title}%s${bodytext}  :  %s\n" "$header" "master vs. ${yellow}$DIFF_BRANCH${frame}"| indent04
    printf '%*s\n\n' "$twidth" '' | tr ' ' _  | indent04
    printf -- '\t%s  %s  %s  %s\n' "${title}Commit" "CommitMsg" "Age" "Author${bodytext}" > $header_file
    # variable width headings
    sum=$(( 60 + 54 + 20 + 23))

    # commit msg header spacing
    pct=$(echo "scale=2;60/$sum" | bc -l)
    cm="$(float2int $(echo "scale=0;$pct*$twidth" | bc -l))"

    # age header spacing
    pct=$(echo "scale=2;57/$sum" | bc -l)
    age="$(float2int $(echo "scale=0;$pct*$twidth" | bc -l))"

    # author header spacing
    pct=$(echo "scale=2;20/$sum" | bc -l)
    auth="$(float2int $(echo "scale=0;$pct*$twidth" | bc -l))"
    awk  '{ printf "\t %-'$cm's %-'$age's %-'$auth's %-23s %-15s %-2s\n", $1, $2, $3, $4, $5, $6}' $header_file
    printf '%*s'  "$twidth" '' | tr ' ' _  | indent04
    echo -e ${bodytext}
    return 0
}


function parse_commits(){
    # branch on number of commits
    commits=$(cat $tmp_file | wc -l)
    if [ "$commits" -eq 0 ]; then
        std_message "No differences between master and $DIFF_BRANCH." "INFO"
        exit 0
    else
        echo $commits
    fi
    return 0
}


function commit_diff(){
    local branch1="$1"
    local branch2="$2"
    local header="$3"
    local sp="${frame}|${bodytext}"       # separator
    local sum
    local pct
    local vw
    # output
    git log --color=always --graph \
        --pretty=format:"%Cred%h%Creset = %C(yellow)%d%Creset %s = %Cgreen%cr%Creset = %Cblue%aE%Creset" \
        --abbrev-commit \
        --date=relative $branch1..$branch2  > $tmp_file

    commit_ct="$(parse_commits)"

    # print section header
    title_header "$branch1" "$DIFF_BRANCH" "$header"
    # print section body
    sum=$(( 14 + 23 + 15 + 83))
    pct=$(echo "scale=2;90/$sum" | bc -l)
    vw="$(float2int $(echo "scale=0;$pct*$twidth" | bc -l))"
    awk -F '=' '{ printf "\t%-14s %-'$vw'.'$vw's %-23s %-15s\n", $1, $2, $3, $4}' $tmp_file
    printf '%*s\n' "$twidth" '' | tr ' ' _  | indent04
}


function file_diff(){
    local branch1="$1"
    local branch2="$2"
    local header="$3"
    # header
    printf -- "\n${title}%s${bodytext}  :  %s\n\n" "$header" "master vs. ${yellow}$DIFF_BRANCH${frame}"| indent04
    # files changed
    git -c color.ui=always diff --stat origin/$branch1..origin/$branch2 | head -n -1 | indent20
}


function overall_diff(){
    local branch1="$1"
    local branch2="$2"
    local header="$3"
    #
    git -c color.ui=always diff --stat origin/$branch1..origin/$branch2  > $tmp_file
    files=$(cat "$tmp_file" | tail -n 1 | awk -F 'files' '{print $1}')
    inserts=$(cat "$tmp_file" | tail -n 1 | awk -F 'insertions' '{print $1}' | awk '{print $NF}')
    deletes=$(cat "$tmp_file" | tail -n 1 | awk -F 'insertions' '{print $2}' | grep -E -o "[0-9]+")
    printf '%*s\n' "$twidth" '' | tr ' ' _  | indent04
    printf -- "\n${title}%s${bodytext}  :  %s\n\n" "$header" "master vs. ${yellow}$branch2${bodytext}"| indent04
    printf -- "  ${title}%s${bodytext} Files, ${title}%s${bodytext} Insertions, ${title}%s${bodytext} Deletions\n" $files $inserts $deletes | indent20
    printf -- "\n  %s\n\n" "Branch ${yellow}$branch2${bodytext} ahead of $branch1 by ${title}$commit_ct${bodytext} commits" | indent20
}


function std_error(){
    local msg="$1"
    echo -e "\n${yellow}[ ${red}ERROR${yellow} ]$reset  $msg\n" | indent04
}


function std_error_exit(){
    local msg="$1"
    local status="$2"
    std_error "$msg"
    exit $status
}

function codediff(){
    ## displays line-by-line code diff ##
    DIFF_BRANCH="$(current_branch)"
    git diff master $DIFF_BRANCH
    return 0
}

function valid_branch(){
    ##
    ##  determines if parameter is valid branch name
    ##
    ##  Returns:
    ##      true | false
    ##
    local altbranch="$1"
    declare -a arr_branches

    for b in $(git branch -a | grep remotes | tail -n +2); do

        branchname=$(echo $b | awk -F '/' '{print $NF}')
        arr_branches=(  ${arr_branches[@]} $branchname  )

    done

    if [ "$(echo "${arr_branches[@]}" | grep $altbranch)" ]; then
        return 0
    else
        return 1
    fi
    #
    # <--- end functino valid_branch --->
}


# ---  main  --------------------------------------------------------------------------------------


function branchdiff(){
    ##
    ##   main:  determine branch to diff with master
    ##
    local reference_branch          # baseline ref branch; usually master branch
    local alternate="$1"            # alternate branch name to compare to reference_branch

    if [ -z $alternate ]; then
        reference_branch="master"
    fi
    DIFF_BRANCH="$(current_branch)"

    # exit if on master
    if [ ! "$(git branch -a 2>/dev/null | grep $DIFF_BRANCH)" ]; then

        std_error_exit "Not a git repository - exit." $E_ERROR

    elif [ "$DIFF_BRANCH" = "master" ]; then

        std_error_exit "Cannot diff master branch with itself - exit." $E_ERROR

    else
        # output report
        commit_diff "$reference_branch" "$DIFF_BRANCH" "BRANCH COMMITS"
        file_diff "$reference_branch" "$DIFF_BRANCH" "FILE DIFF"
        overall_diff "$reference_branch" "$DIFF_BRANCH" "OVERALL DIFF"
        # clean up
        rm -fr $tmp_file
        exit 0
    fi
}

parse_parameters "$@"

case $OPERATION in
    'alt_branch_compare')
        branchdiff $ALT_BRANCH
        ;;

    'code')
        coddiff
        ;;

    'display_version')
        display_program_version
        shift 1
        ;;

    'help')
        help_menu | more
        ;;

    *)
        branchdiff
        ;;
esac


exit 0      ##  end  ##
